version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: koradius_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-myuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mypassword}
      POSTGRES_DB: ${POSTGRES_DB:-mydatabase}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - koradius_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-myuser}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for message queuing
  redis:
    image: redis:7-alpine
    container_name: koradius_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - koradius_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: koradius_nginx
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend-1
      - backend-2
    networks:
      - koradius_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server - Instance 1
  backend-1:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: koradius_backend_1
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      INSTANCE_ID: backend-1
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-mydatabase}
      DB_USER: ${POSTGRES_USER:-myuser}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-mypassword}
      DB_SSL: "false"
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-64-character-hex-encryption-key-for-sensitive-data-change-this}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD:-admin123}
      # NodeMailer Configuration
      EMAIL_USER: ${EMAIL_USER:-systemsairbag@gmail.com}
      EMAIL_PASS: ${EMAIL_PASS:-snbh yglc chip bzqg}
    expose:
      - "3001"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - koradius_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server - Instance 2
  backend-2:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: koradius_backend_2
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      INSTANCE_ID: backend-2
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-mydatabase}
      DB_USER: ${POSTGRES_USER:-myuser}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-mypassword}
      DB_SSL: "false"
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-64-character-hex-encryption-key-for-sensitive-data-change-this}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD:-admin123}
      # NodeMailer Configuration
      EMAIL_USER: ${EMAIL_USER:-systemsairbag@gmail.com}
      EMAIL_PASS: ${EMAIL_PASS:-snbh yglc chip bzqg}
    expose:
      - "3001"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - koradius_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  koradius_network:
    driver: bridge
